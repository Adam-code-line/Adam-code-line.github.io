[{"content":"Vue 学习指南 这篇指南面向想系统学习 Vue 3 的开发者，覆盖从环境搭建、组合式 API、组件设计、路由、状态管理到测试与部署的简单实用示例和练习。\n1. 开发环境与快速启动 推荐使用 Node.js（16+）与 Vite 创建项目：\n1 2 3 4 5 6 7 8 # 全局安装（可选） npm install -g pnpm # 使用 pnpm 创建项目 pnpm create vite@latest my-vue-app -- --template vue-ts cd my-vue-app pnpm install pnpm dev 打开 http://localhost:5173 即可预览。\n2. 核心概念（简要） 组件（Components）：UI 的可复用单元。 响应式（Reactivity）：ref、reactive 提供响应式数据。 生命周期钩子：onMounted、onUnmounted 等。 组合式 API（Composition API）：使用 setup() 或 script setup 来组织逻辑。 3. 组合式 API 基本示例 以下示例展示计数器的实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Count: {{ count }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;Increment\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import { ref } from \u0026#39;vue\u0026#39; const count = ref(0) function increment() { count.value++ } \u0026lt;/script\u0026gt; 4. 组件传参与事件 父组件向子组件传递 props，并通过 emit 触发事件：\nChild.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;onClick\u0026#34;\u0026gt;{{ label }}\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import { defineProps, defineEmits } from \u0026#39;vue\u0026#39; const props = defineProps\u0026lt;{ label: string }\u0026gt;() const emit = defineEmits\u0026lt;{ (e: \u0026#39;clicked\u0026#39;): void }\u0026gt;() function onClick() { emit(\u0026#39;clicked\u0026#39;) } \u0026lt;/script\u0026gt; Parent.vue\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;template\u0026gt; \u0026lt;Child label=\u0026#34;Click me\u0026#34; @clicked=\u0026#34;handle\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39; function handle() { console.log(\u0026#39;child clicked\u0026#39;) } \u0026lt;/script\u0026gt; 5. 路由（Vue Router）基础 安装并配置 Vue Router：\n1 pnpm add vue-router@4 src/router/index.ts 示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import Home from \u0026#39;../views/Home.vue\u0026#39; import About from \u0026#39;../views/About.vue\u0026#39; const routes = [ { path: \u0026#39;/\u0026#39;, component: Home }, { path: \u0026#39;/about\u0026#39;, component: About }, ] export const router = createRouter({ history: createWebHistory(), routes, }) 在 main.ts 中挂载：\n1 2 3 4 5 import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import { router } from \u0026#39;./router\u0026#39; createApp(App).use(router).mount(\u0026#39;#app\u0026#39;) 6. 状态管理（Pinia） 使用 Pinia 取代 Vuex：\n1 pnpm add pinia 示例 store：\n1 2 3 4 5 6 7 8 9 // stores/counter.ts import { defineStore } from \u0026#39;pinia\u0026#39; import { ref } from \u0026#39;vue\u0026#39; export const useCounter = defineStore(\u0026#39;counter\u0026#39;, () =\u0026gt; { const count = ref(0) function increment() { count.value++ } return { count, increment } }) 在主应用中挂载 Pinia：\n1 2 import { createPinia } from \u0026#39;pinia\u0026#39; createApp(App).use(createPinia()).use(router).mount(\u0026#39;#app\u0026#39;) 组件中使用：\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;script setup lang=\u0026#34;ts\u0026#34;\u0026gt; import { useCounter } from \u0026#39;@/stores/counter\u0026#39; const counter = useCounter() \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;{{ counter.count }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;counter.increment\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 7. 常用工具与测试 开发工具：Vite、ESLint、Prettier、TypeScript。 测试：Vitest + @vue/test-utils。 简单的 Vitest 测试示例：\n1 2 3 4 5 6 7 8 9 10 11 // tests/example.spec.ts import { describe, it, expect } from \u0026#39;vitest\u0026#39; import { mount } from \u0026#39;@vue/test-utils\u0026#39; import Hello from \u0026#39;../src/components/HelloWorld.vue\u0026#39; describe(\u0026#39;Hello\u0026#39;, () =\u0026gt; { it(\u0026#39;renders properly\u0026#39;, () =\u0026gt; { const wrapper = mount(Hello) expect(wrapper.text()).toContain(\u0026#39;Hello\u0026#39;) }) }) 8. 部署与发布建议 小型项目可以使用 Vercel 或 Netlify 直接部署，无需复杂配置。 打包命令： 1 2 3 pnpm build # 本地预览 pnpm preview 9. 参考资源 Vue 3 官方文档 Vue Router 文档 Pinia 文档 Vitest 文档 ","date":"2025-10-01T10:52:24+08:00","image":"https://adam-code-line.github.io/p/vue-learning-guide/cover_hu_1d9a212cbcfa3493.jpg","permalink":"https://adam-code-line.github.io/p/vue-learning-guide/","title":"Vue"},{"content":"前端学习路线 写博客是把自己学到的知识沉淀并分享给别人的好方法。本文模仿项目中的风格，给出一套清晰的前端学习路线，适用于刚入门的同学，也适合想系统提升的开发者。\n为什么需要一条明确的学习路线 前端技术栈庞杂，工具和框架迭代快。如果没有系统性的学习计划，容易在碎片化的资料中迷失，不知下一步该学什么。一个合理的路线能帮助你建立知识体系、提升可迁移能力，并且尽早能做出完整的项目。\n学习路线总览 阶段 0：准备 (工具, 英语, 开发环境) 阶段 1：基础前端三剑客 (HTML/CSS/JavaScript) 阶段 2：前端三件套 (框架, 路由, 状态管理) 阶段 3：进阶 (TypeScript, 构建工具, 性能, 无障碍) 阶段 4：全栈与工程化 (后端基础, 部署, 测试) 阶段 5：项目驱动学习与实习面试准备 下面逐步展开每个阶段的推荐内容与练习方式。\n阶段 0：准备 安装并熟练使用一套编辑器 (VS Code 推荐) 和常用插件 (格式化, ESLint, vue(official)). 学习使用 Git 与 GitHub，掌握基本的 push、分支与 Pull Request 流程。 提升阅读英文文档的能力，前端优秀资源大多以英文为主。 阶段 1：基础 (约 1–2 个月) HTML: 语义化标签, 表单, 可访问性 (ARIA) 基础. CSS: 盒模型, Flexbox, Grid, 响应式设计, 常见布局技巧. JavaScript: 语法, 闭包, 原型链, 异步 (Promise, async/await), 模块化. 练习：实现若干静态页面（登录页、博客列表页、卡片布局），并尝试移动端适配。\n阶段 2：前端三件套 (约 1–3 个月) 框架: Vue 3 (或 React/Angular, 视团队与个人喜好). 掌握组件, 组合式 API (Vue 的 script setup), 生命周期, Props/Emit. 路由: 客户端路由的使用与懒加载 (例如 Vue Router). 状态管理: Pinia (Vue) 或 Redux (React) 的基本模式与实践. 练习：基于框架实现一个小型应用（Todo、简单博客、记账工具），包含路由和状态管理。\n阶段 3：进阶 (约 2–4 个月) TypeScript: 类型系统, 泛型, 声明文件 (.d.ts), 与现有 JS 项目迁移技巧. 构建工具: Vite / Webpack / Rollup 的基础配置与性能优化思路. CSS 工具: TailwindCSS, 预处理器 (Sass/LESS), CSS Modules. 性能与可访问性: 懒加载, code-splitting, 图片优化, 无障碍 (a11y) 最佳实践. 练习：给已有项目引入 TypeScript，做一次性能审计并逐项优化。\n阶段 4：全栈与工程化 (约 2–4 个月) 后端基础: RESTful API, GraphQL, 基础数据库 (Postgres, MongoDB) 概念. 部署: Docker, CI/CD (GitHub Actions), 托管平台 (Vercel, Netlify, 云主机). 测试: 单元测试 (Vitest/Jest), 端到端测试 (Cypress). 监控与日志: Sentry, 性能监控 (Lighthouse). 练习：把应用后端作为简单服务部署，使用 GitHub Actions 做自动化部署。\n阶段 5：项目驱动学习与面试准备 用项目驱动: 选择一个中等复杂度的项目 (支持用户登录, 数据持久化, 文件上传, 搜索/筛选), 把学习的技术整合进来. 写技术博客与读源码: 把你遇到的问题记录成文章, 帮助他人也帮助自己. 面试题训练: 算法基础, 网络/浏览器原理, 系统设计的简要理解. 学习建议 输出优先于输入: 能把学到的知识写成文章或实现成项目, 才算真正掌握. 定期复盘: 每 2–4 周总结学习进度, 调整计划. 社区与开源: 参与讨论, PR, 能快速提升工程能力. 参考资源（部分） MDN (HTML/CSS/JS) Vue 官方文档 / React 官方文档 Vite, Tailwind, TypeScript 官方指南 学习路线图 ⬇️ 下载 前端学习路线图(出处:https://front-talk.com/roadmap) ","date":"2025-09-30T11:04:33+08:00","image":"https://adam-code-line.github.io/p/frontend-learning-path/cover_hu_ffc67913452221a7.jpg","permalink":"https://adam-code-line.github.io/p/frontend-learning-path/","title":"前端学习路线"},{"content":"第一次写博客 在很早之前就有过写博客的想法，但是一直没有付诸行动。直到最近，终于决定开始记录自己的生活和学习经历。一开始本来是想着自己写一个博客系统，但是考虑到时间和精力的问题，最终选择了使用Hugo这个静态网站生成器。经过一番折腾，终于搭建好了自己的个人博客网站。希望自己以后能够坚持更新，分享更多有趣的内容和有用的知识。\n","date":"2025-09-21T23:35:33+08:00","image":"https://adam-code-line.github.io/p/life/cover_hu_dde4c1f358e5b772.jpg","permalink":"https://adam-code-line.github.io/p/life/","title":"我的第一篇文章"}]